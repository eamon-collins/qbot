NOTES

justification for list of statenode:
can't do vector of statenode because parent pointer needs to be kept but everytiume vector resizes and renders pointers unreliable.
vector of smart pointers to statenodes is aight solution, but if the actual objects are going to be separated in memory anyway, why not use list? get constant time insertion/removal at front, good elsewhere, and some memory management (probably, idk)
Also, I think in play_out, for every time generate_valid_children is called and needs to sequentially add a bunch of nodes, we need to select one of those at random to explore, so constant pushing probably better than constant random access.

also a significant part might be pruning nodes, so removing from the middle



replacing char -> unsigned char, only place i had uchar before is gamestate reading and writing in Statenode(buffer) and fill_gamestate
transferred over to all char, doesn't seem to have done a single thing tbh


offsetting the gamestate chars by 33 is to avoid the bottom 33 slots of the ascii encoding, which is full of whitespace and other utility bs. just avoiding it all together is simply better. Maybe thing about doing +64 instead by bit operations, to make it quicker?